#!/usr/bin/perl -w
use strict;
use Term::ANSIColor qw (:constants);
local $Term::ANSIColor::AUTORESET = 1;
use Time::Local;

my $version="v1.0.5";
# v1.0.2 -- add options to handle greylisting - no need, as it already does this.
# v1.0.3 -- sort out more robust handling of zipfiles
# v1.0.4 -- add reporting of relay to outputs
# v1.0.5 -- fix collecting relay IP address
#
# TO DO:
#	option for only showing the last hour/day/week of result
#	option to only show the last 'n' results
#	Continuous running mode which uses tail.  probably needs a complete rewrite
#	option to hide the QID
#	tracking the initial contact which uses a 5 digit QID
#	option to have a numerical summary of all emails received
#		local, non-local, total, ham, spam per hour, day, week
#	emphasise mail from certain email addresses (e.g. family)
#
#
my @options=@ARGV;
my $verbose=0;
my $reports=0;
my $all=0;
my $last=0;
print "Version: $version\n";
print "Options:\n";
foreach my $option (@options) {
	chomp $option;
	print "\t$option\n";
	if ( $option eq "verbose" ) {$verbose=1;}
	if ( $option eq "reports" ) {$reports=1;}
	if ( $option eq "all" ) {$all=1;}
	if ( $option eq "last" ) {$last=1;}
}

# Select which files we're going to parse.  By default, this is just the current and previous files.
my @logs=("/var/log/maillog.1.gz", "/var/log/maillog.1", "/var/log/maillog");
if ( $all==1) { @logs=`ls /var/log/maillog*`;}
if ( $last==1) { @logs=("/var/log/maillog.4*", "/var/log/maillog.3*", "/var/log/maillog.2*", "/var/log/maillog.1*", "/var/log/maillog");}
#my @logs=`ls /var/log/maillog`;
my %times;
my %timestamp;
my %from;
my %to;
my %alias_from;
my %alias_to;
my %months=( "Jan"=>0, "Feb"=>1, "Mar"=>2, "Apr"=>3, "May"=>4, "Jun"=>5,
	"Jul"=>6, "Aug"=>7, "Sep"=>8, "Oct"=>9, "Nov"=>10, "Dec"=>11 );
my %size;
my %size_describe;
my %relay;
my %to_relay;
my %from_relay;
my %ip_addr;
my %host;
my %reject;
my %dsn;
my %spam_score;
my %required_score;
my %spam_tests;
my %spam_report;
my %stat;
my $year = `date +%Y`;
my $runtime=`date +%s`;
my %ctladdr;
foreach my $log (@logs) {
	chomp $log;
	my @lines;
	if ( $log =~ /\.gz$/) {
		@lines=`gunzip -c $log`;
	} else {
		@lines=`cat $log`;
	}
	foreach my $line (@lines) {
		chomp $line;
		print GREEN, "$line\n" if $verbose;
		my $date;
		my $hostname;
		my $pid;
		my $qid;
		my $data;
		if ( $line =~ /^([A-Z][a-z]{2} [0-9 ]{2} [0-9:]{8}) (.*) sendmail\[([0-9]+)\]: (.*)$/) {
			$date=$1;
			$hostname=$2;
			$pid=$3;
			$data=$4;
			$pid =~ sprintf ( "%5s", $pid );
			#$pid=$log.$pid;
			if ( $log =~ /\.gz$/) { $pid.=".1"; } else { $pid.=".0"; }
			print RED, "\tdate:\t$date\n" if $verbose;
			print RED, "\thostname:\t$hostname\n" if $verbose;
			print RED, "\tpid:\t$pid\n" if $verbose;
			print RED, "\tdata:\t$data\n" if $verbose;
			if ( $data =~ /NOQUEUE: connect from (.*)(\[[0-9.]+\]).*$/ ){
				#this never has the qid
				#$ip_addr{$pid}=$2;
				#$host{$pid}=$1;
				#$times{$pid}=$date;
				#my ($month, $day, $time) = split /\s+/, $date, 3;
				#my ($hours, $minutes, $seconds) = split /:+/, $time;
		                #my $mnum=$months{$month};
				#my $timestamp=timelocal($seconds, $minutes, $hours, $day, $mnum, $year-1900);
				#if ($timestamp>$runtime) {
				#	print "\t$timestamp in the future!  Assuming " if $verbose;
				#	$timestamp=timelocal($seconds, $minutes, $hours, $day, $mnum, $year-1901);
				#	print "\t$timestamp \n" if $verbose;
				#}
				#$timestamp{$pid}=$timestamp;
				#print BLUE, "\tline:\t$pid\t$line\n" if $verbose;
				#print BLUE, "\tdata:\t$pid\t$data\n" if $verbose;
				#print BLUE, "\thost:\t$pid\t$host{$pid}\n" if $verbose;
				#print BLUE, "\tip:\t$pid\t$ip_addr{$pid}\n" if $verbose;
				#sleep 1 if $verbose;
			}
		}	
		if ( $line =~ /^([A-Z][a-z]{2} [0-9 ]{2} [0-9:]{8}) (.*) sendmail\[([0-9]*)\]: ([a-zA-Z0-9]{9}[0-9]{5}): (.*)$/) {
			$date=$1;
			$hostname=$2;
			$pid=$3;
			$qid=$4;
			$data=$5;
			print RED, "\tdate:\t($qid)\t$date\n" if $verbose;
			print RED, "\thostname:\t($qid)\t$hostname\n" if $verbose;
			print RED, "\tpid:\t($qid)\t$pid\n" if $verbose;
			print RED, "\tqid:\t($qid)\t$qid\n" if $verbose;
			print RED, "\tdata:\t($qid)\t|$data|\n" if $verbose;
			my ($month, $day, $time) = split /\s+/, $date, 3;
			my ($hours, $minutes, $seconds) = split /:+/, $time;
		        my $mnum=$months{$month};
			my $timestamp=timelocal($seconds, $minutes, $hours, $day, $mnum, $year-1900);
			if ($timestamp>$runtime) {
				print "\t$timestamp in the future!  Assuming " if $verbose;
				$timestamp=timelocal($seconds, $minutes, $hours, $day, $mnum, $year-1901);
				print "\t$timestamp \n" if $verbose;
				}
			$timestamp{$qid}=$timestamp;
			
			if ( $data =~ /from=([^ ]*),/ ) { 
				$from{$qid}=$1;
				$from{$qid}=~s/[\<\>]//g;
				$times{$qid}=$date; 
				print YELLOW "\tfrom:\t($qid)\t$from{$qid}\n" if $verbose;
			} 
			if ( $data =~ /^to=([^ ]+),/ ) { 
				if ( exists($to{$qid})) {
					$to{$qid}.=", $1"; 
				} else {
					$to{$qid}=$1; 
				}
				$to{$qid}=~s/[\<\>]//g;
				$times{$qid}=$date;
				print YELLOW "\tto:\t($qid)\t$to{$qid}\n" if $verbose;
			} 
			if ( $data =~ / to=([^ ]+),/ ) { 
				if ( exists($to{$qid})) {
					$to{$qid}.=", $1"; 
				} else {
					$to{$qid}=$1; 
				}
				$to{$qid}=~s/[\<\>]//g;
				$times{$qid}=$date;
				print YELLOW "\tto:\t($qid)\t$to{$qid}\n" if $verbose;
			} 
			if ( $data =~ /ruleset=check_rcpt, arg1=([^ ]*),/ ) { 
				$to{$qid}=$1; 
				$to{$qid}=~s/[\<\>]//g;
				$times{$qid}=$date;
				print YELLOW "\tto:\t($qid)\t$to{$qid}\n" if $verbose;
			} 
			if ( $data =~ /reject=(.*)$/ ) { 
				$stat{$qid}=$1; 
				$times{$qid}=$date;
				print YELLOW "\tstat1:\t($qid)\t$stat{$qid}\n" if $verbose;
			}
			if ( $data =~ /<([^>]*)>...  550 (.*)$/ ) { 
				$to{$qid}=$1; 
				$stat{$qid}=$2; 
				$times{$qid}=$date;
				print YELLOW "\tstat2:\t($qid)\t$stat{$qid}\n" if $verbose;
			} 
			if ( $data =~ /stat=(.*)/ ) { 
				$stat{$qid}=$1; 
				$times{$qid}=$date;
				print YELLOW "\tstat3:\t($qid)\t$stat{$qid}\n" if $verbose;
			} 
			if ( $data =~ /size=(.*), class/ ) { 
				my $size=$1; 
				$times{$qid}=$date;
				if ( $size<1024) {$size{$qid}=sprintf("%.2f", $size)." bytes";}
				if ( $size>(1024**1) ) {$size{$qid}=sprintf("%.2f", ($size/(1024**1)))." KB";}
				if ( $size>(1024**2) ) {$size{$qid}=sprintf("%.2f", ($size/(1024**2)))." MB";}
				if ( $size>(1024**3) ) {$size{$qid}=sprintf("%.2f", ($size/(1024**3)))." GB!";}
				if ( $size>(1024**4) ) {$size{$qid}=sprintf("%.2f", ($size/(1024**4)))." TB!";}
				print YELLOW "\tsize:\t($qid)\t$size{$qid}\n" if $verbose;
			} 
			if ( $data =~ /([^ ] )*\[([0-9.]+)\] (\(may be forged\) )*(did not .*)/ ) { 
				$from_relay{$qid}=$2; 
				$stat{$qid}=$4; 
				$times{$qid}=$date; 
				print YELLOW "\tstat4:\t($qid)\t$stat{$qid}\n" if $verbose;
			}
			if ( $data =~ /alias (.*) => (.*)/ ) { 
				$alias_from{$qid}=$1; 
				$alias_to{$qid}=$2; 
				$times{$qid}=$date; 
				print YELLOW "\talias:\t($qid)\t$alias_from{$qid} => $alias_to{$qid}\n" if $verbose;
			}
			if ( $data =~ /to=\<.*relay=.*\[([a-z0-9.]+)\]/ ) { 
				$to_relay{$qid}=$1; 
				$times{$qid}=$date; 
				print YELLOW "\tto_relay:\t($qid)\t$to_relay{$qid}\n" if $verbose;
			}
			if ( $data =~ /from=.*relay=.*\[([0-9]+.[0-9]+.[0-9]+.[0-9]+)\]/ ) { 
				$from_relay{$qid}=$1; 
				$times{$qid}=$date; 
				print YELLOW "\tfrom_relay:\t($qid)\t$from_relay{$qid}\n" if $verbose;
			}
			if ( $data =~ /^Milter add: header: X-Spam-Report: (.*)$/){
				$spam_report{$qid}=$1;
				#$spam_report{$qid} =~ s/(["*\/])/\\$1/g;
				$spam_report{$qid} =~ s/\\n/\n/g;
				$spam_report{$qid} =~ s/\\t/\t\t/g;
			}
			if ( $data =~ /^Milter add: header: X-Spam-Status: Yes, score=([0-9.]+) required=([0-9.]+) tests=(.*)$/){
				$spam_score{$qid}=$1;
				$required_score{$qid}=$2;
				$spam_tests{$qid}=$3;
				$spam_tests{$qid} =~ s/\\n/\n/g;
				$spam_tests{$qid} =~ s/\\t/\t\t/g;
			}
			if ( $data =~ /^Milter change \(add\): header: X-Spam-Status: Yes, score=([0-9.]+) required=([0-9.]+) tests=(.*)$/){
				$spam_score{$qid}=$1;
				$required_score{$qid}=$2;
				$spam_tests{$qid}=$3;
				$spam_tests{$qid} =~ s/\\n/\n/g;
				$spam_tests{$qid} =~ s/\\t/\t\t/g;
			}
		}
	}
}

exit if $verbose;
sleep 20 if $verbose;

#foreach my $qid (sort {$timestamp{$a} <=> $timestamp{$b} } keys %timestamp) {
foreach my $qid (sort by_timestamp_and_qid keys %timestamp) {
	#print WHITE "\n";
	print WHITE "$qid ";
	#print WHITE "$qid " if $verbose;
	print WHITE "$times{$qid} " if exists($times{$qid});
	print GREEN "$ip_addr{$qid} " if exists($ip_addr{$qid});
	print GREEN "[$from_relay{$qid}] " if exists $from_relay{$qid};
	print GREEN "-> " if exists($to_relay{$qid}) && exists($from_relay{$qid});;
	print GREEN "[$to_relay{$qid}] " if exists $to_relay{$qid};
	print CYAN "$from{$qid} " if exists $from{$qid};
	print RED "($alias_from{$qid} => " if exists $alias_from{$qid};
	print RED "$alias_to{$qid}) " if exists $alias_to{$qid};
	print CYAN "-> $to{$qid} " if exists $to{$qid};
	print CYAN "($size{$qid}) " if exists $size{$qid};
	print GREEN "$stat{$qid}", RESET if exists $stat{$qid};
	if ( exists($spam_score{$qid}) ) {
		print " $spam_score{$qid}/$required_score{$qid}";
		if ( exists($spam_report{$qid}) ) {
			print YELLOW "$spam_report{$qid}" if $reports;
		} else {
			print YELLOW "\n\t\t$spam_tests{$qid}", RESET if $reports;
		}
	}
	print RESET "\n";
}

print RESET "\n";
#my $events = keys %timestamp;
#my $emails = keys %times;
#my $spam = keys %spam_score;
##my $realmail = keys %realmails;
#print "Sent: Total events:\t$events\n";
#print "Sent: Total emails:\t$emails\n";
##print "Sent: Real emails:\t$realmail\n";
#print "Sent: Spam emails:\t$spam\n";

sub by_timestamp_and_qid {
	$timestamp{$a} <=> $timestamp{$b} or
	$a cmp $b
}
